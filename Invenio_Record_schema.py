# generated by datamodel-codegen:
#   filename:  record-v5.0.0.json
#   timestamp: 2023-04-21T15:34:55+00:00

from __future__ import annotations

from datetime import date, datetime
from enum import Enum
from typing import Any, Dict, List, Optional, Union

from pydantic import AnyUrl, BaseModel, Extra, Field, constr


class Record(Enum):
    public = 'public'
    restricted = 'restricted'


class Files(Enum):
    public = 'public'
    restricted = 'restricted'


class Embargo(BaseModel):
    class Config:
        extra = Extra.forbid

    active: Optional[bool] = Field(
        None, description='Whether or not the embargo is (still) active.'
    )
    until: Optional[date] = Field(
        None,
        description='Embargo date of record (ISO8601 formatted date time in UTC). At this time both metadata and files will be made public.',
    )
    reason: Optional[str] = Field(
        None, description='The reason why the record is under embargo.'
    )


class Access(BaseModel):
    class Config:
        extra = Extra.forbid

    record: Optional[Record] = Field(
        None, description='Record visibility (public or restricted)'
    )
    files: Optional[Files] = Field(
        None, description='Files visibility (public or restricted)'
    )
    embargo: Optional[Embargo] = Field(
        None, description='Description of the embargo on the record.'
    )


class FieldSchema(BaseModel):
    __root__: Any


class Identifier(BaseModel):
    __root__: str = Field(..., description='An identifier.')


class Status(Enum):
    N = 'N'
    K = 'K'
    R = 'R'
    M = 'M'
    D = 'D'


class InternalPid(BaseModel):
    class Config:
        extra = Extra.forbid

    pk: int = Field(..., description='Primary key of the PID object.')
    status: Status = Field(
        ..., description='The status of the PID (from Invenio-PIDStore).'
    )
    pid_type: Optional[str] = Field(
        None, description='The type of the persistent identifier.'
    )
    obj_type: Optional[str] = Field(
        None, description='The type of the associated object.'
    )


class ExternalPid(BaseModel):
    class Config:
        extra = Extra.forbid

    identifier: Optional[Identifier] = None
    provider: Optional[str] = Field(
        None, description='The provider of the persistent identifier.'
    )
    client: Optional[str] = Field(
        None, description='Client identifier for the specific PID.'
    )


class ResourceType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class Scheme(BaseModel):
    __root__: str = Field(..., description='A scheme.')


class NameType(Enum):
    personal = 'personal'
    organizational = 'organizational'


class Role(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class Affiliation(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None
    name: Optional[str] = None


class TitleType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class Language(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class Subject(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None
    subject: Optional[str] = None


class DateType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class RelationType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None


class DescriptionType(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[str] = None


class Type(Enum):
    Point = 'Point'


class GeoJSONGeometryItem(BaseModel):
    type: Type
    coordinates: List[float] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type1(Enum):
    LineString = 'LineString'


class Coordinate(BaseModel):
    __root__: List[Any]


class GeoJSONGeometryItem1(BaseModel):
    type: Type1
    coordinates: List[Coordinate] = Field(..., min_items=2)
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type2(Enum):
    Polygon = 'Polygon'


class GeoJSONGeometryItem2(BaseModel):
    type: Type2
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type3(Enum):
    MultiPoint = 'MultiPoint'


class GeoJSONGeometryItem3(BaseModel):
    type: Type3
    coordinates: List[List[float]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type4(Enum):
    MultiLineString = 'MultiLineString'


class GeoJSONGeometryItem4(BaseModel):
    type: Type4
    coordinates: List[List[Coordinate]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class Type5(Enum):
    MultiPolygon = 'MultiPolygon'


class GeoJSONGeometryItem5(BaseModel):
    type: Type5
    coordinates: List[List[List[Coordinate]]]
    bbox: Optional[List[float]] = Field(None, min_items=4)


class GeoJSONGeometry(BaseModel):
    __root__: Union[
        GeoJSONGeometryItem,
        GeoJSONGeometryItem1,
        GeoJSONGeometryItem2,
        GeoJSONGeometryItem3,
        GeoJSONGeometryItem4,
        GeoJSONGeometryItem5,
    ] = Field(..., title='GeoJSON Geometry')


class User(BaseModel):
    class Config:
        extra = Extra.forbid

    user: Optional[int] = None


class File(BaseModel):
    class Config:
        extra = Extra.forbid

    version_id: Optional[str] = Field(None, description='Object version ID.')
    bucket_id: Optional[str] = Field(None, description='Object verison bucket ID.')
    mimetype: Optional[str] = Field(None, description='File MIMEType.')
    uri: Optional[str] = Field(None, description='File URI.')
    storage_class: Optional[str] = Field(None, description='File storage class.')
    checksum: Optional[str] = Field(None, description='Checksum of the file.')
    size: Optional[float] = Field(None, description='Size of the file in bytes.')
    key: Optional[str] = Field(None, description='Key (filename) of the file.')
    file_id: Optional[Identifier] = None


class AdditionalTitle(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[str] = Field(None, description='Additional title of the record.')
    type: Optional[TitleType] = None
    lang: Optional[Language] = None


class Date(BaseModel):
    class Config:
        extra = Extra.forbid

    date: Optional[str] = Field(
        None, description='Date or date interval in EDTF level 0 format'
    )
    type: Optional[DateType] = None
    description: Optional[str] = Field(
        None,
        description="Description of the date or date interval e.g. 'Accepted' or 'Available' (CV).",
    )


class RelatedIdentifier(BaseModel):
    class Config:
        extra = Extra.forbid

    identifier: Optional[Identifier] = None
    scheme: Optional[Scheme] = None
    relation_type: Optional[RelationType] = None
    resource_type: Optional[ResourceType] = None


class Right(BaseModel):
    class Config:
        extra = Extra.forbid

    id: Optional[Identifier] = None
    title: Optional[Dict[str, Any]] = Field(
        None, description='The license name or license itself. Free text.'
    )
    description: Optional[Dict[str, Any]] = Field(
        None, description='The license description Free text.'
    )
    link: Optional[AnyUrl] = None


class AdditionalDescription(BaseModel):
    class Config:
        extra = Extra.forbid

    description: Optional[str] = Field(None, description='Description for record.')
    type: Optional[DescriptionType] = None
    lang: Optional[Language] = None


class Geometry(BaseModel):
    type: Optional[Any] = None
    coordinates: Optional[Any] = None


class Funder(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None
    id: Optional[Identifier] = None


class Reference(BaseModel):
    class Config:
        extra = Extra.forbid

    reference: Optional[str] = Field(None, description='A reference string.')
    identifier: Optional[Identifier] = None
    scheme: Optional[Scheme] = None


class Files1(BaseModel):
    class Config:
        extra = Extra.forbid

    enabled: Optional[bool] = Field(
        None, description='Set to false for metadata only records.'
    )
    default_preview: Optional[str] = Field(
        None, description='Key of the default previewed file.'
    )
    order: Optional[List[str]] = None
    entries: Optional[Dict[str, File]] = None
    meta: Optional[Dict[str, Dict[str, Any]]] = None


class IdentifiersWithScheme(BaseModel):
    class Config:
        extra = Extra.forbid

    identifier: Optional[Identifier] = None
    scheme: Optional[Scheme] = None


class Affiliations(BaseModel):
    __root__: List[Affiliation] = Field(..., unique_items=True)


class Subjects(BaseModel):
    __root__: List[Subject] = Field(..., unique_items=True)


class Agent(BaseModel):
    __root__: User = Field(
        ..., description='An agent (user, software process, community, ...).'
    )


class Feature(BaseModel):
    geometry: Optional[Geometry] = None
    identifiers: Optional[List[IdentifiersWithScheme]] = Field(None, unique_items=True)
    place: Optional[constr(min_length=1)] = Field(
        None, description='Place of the location'
    )
    description: Optional[constr(min_length=1)] = Field(
        None, description='Description of the location'
    )


class Locations(BaseModel):
    class Config:
        extra = Extra.forbid

    features: Optional[List[Feature]] = Field(None, min_items=1)


class Award(BaseModel):
    class Config:
        extra = Extra.forbid

    title: Optional[Dict[str, Any]] = None
    number: Optional[str] = None
    id: Optional[Identifier] = None
    identifiers: Optional[List[IdentifiersWithScheme]] = None


class FundingItem(BaseModel):
    class Config:
        extra = Extra.forbid

    funder: Optional[Funder] = None
    award: Optional[Award] = None


class Tombstone(BaseModel):
    class Config:
        extra = Extra.forbid

    reason: Optional[str] = Field(None, description='Reason for removal.')
    category: Optional[str] = Field(None, description='Category for the removal.')
    removed_by: Optional[Agent] = None
    timestamp: Optional[datetime] = Field(
        None, description='ISO8601 formatted timestamp in UTC.'
    )


class Provenance(BaseModel):
    class Config:
        extra = Extra.forbid

    created_by: Optional[Agent] = None
    on_behalf_of: Optional[Agent] = None


class PersonOrOrg(BaseModel):
    class Config:
        extra = Extra.forbid

    name: Optional[str] = None
    type: Optional[NameType] = None
    given_name: Optional[str] = None
    family_name: Optional[str] = None
    identifiers: Optional[List[IdentifiersWithScheme]] = Field(None, unique_items=True)


class Creator(BaseModel):
    class Config:
        extra = Extra.forbid

    person_or_org: Optional[PersonOrOrg] = None
    role: Optional[Role] = None
    affiliations: Optional[Affiliations] = None


class Contributor(BaseModel):
    class Config:
        extra = Extra.forbid

    person_or_org: Optional[PersonOrOrg] = None
    role: Optional[Role] = None
    affiliations: Optional[Affiliations] = None


class Metadata(BaseModel):
    class Config:
        extra = Extra.forbid

    resource_type: Optional[ResourceType] = None
    creators: Optional[List[Creator]] = Field(
        None, description='Creators of the resource.'
    )
    title: Optional[str] = Field(None, description='Primary title of the record.')
    additional_titles: Optional[List[AdditionalTitle]] = Field(
        None, description='Additional record titles.'
    )
    publisher: Optional[str] = None
    publication_date: Optional[str] = Field(
        None, description='Record publication date (EDTF level 0 format).'
    )
    subjects: Optional[Subjects] = None
    contributors: Optional[List[Contributor]] = Field(
        None, description='Contributors in order of importance.'
    )
    dates: Optional[List[Date]] = Field(None, description='Date or date interval.')
    languages: Optional[List[Language]] = Field(
        None,
        description='The primary languages of the resource. ISO 639-3 language code.',
        unique_items=True,
    )
    identifiers: Optional[List[IdentifiersWithScheme]] = Field(
        None, description='Alternate identifiers for the record.', unique_items=True
    )
    related_identifiers: Optional[List[RelatedIdentifier]] = Field(
        None, unique_items=True
    )
    sizes: Optional[List[str]] = None
    formats: Optional[List[str]] = None
    version: Optional[str] = Field(None, description='Record version tag.')
    rights: Optional[List[Right]] = Field(
        None, description='Any license or copyright information for this resource.'
    )
    description: Optional[str] = Field(
        None, description='Description for record (may contain HTML).'
    )
    additional_descriptions: Optional[List[AdditionalDescription]] = None
    locations: Optional[Locations] = Field(
        None, description='Geographical locations relevant to this record.'
    )
    funding: Optional[List[FundingItem]] = None
    references: Optional[List[Reference]] = Field(None, min_items=0)


class InveniordmRecordSchemaV500(BaseModel):
    class Config:
        extra = Extra.forbid

    field_schema: Optional[FieldSchema] = Field(None, alias='$schema')
    id: Optional[Identifier] = None
    pid: Optional[InternalPid] = None
    pids: Optional[Dict[str, ExternalPid]] = Field(
        None,
        description='External persistent identifiers for a record including e.g. OAI-PMH identifier, minted DOIs and more. PIDs are registered in the PIDStore.',
    )
    metadata: Optional[Metadata] = Field(None, description='Resource metadata.')
    custom_fields: Optional[Dict[str, Any]] = Field(
        None, description='Configured additional metadata'
    )
    tombstone: Optional[Tombstone] = Field(
        None, description='Tombstone for the record.'
    )
    provenance: Optional[Provenance] = Field(None, description='Record provenance.')
    access: Optional[Access] = Field(
        None, description='Record access control and ownership.'
    )
    files: Optional[Files1] = Field(
        None, description='Files associated with the record'
    )
    notes: Optional[List[str]] = None
